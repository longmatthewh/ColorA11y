var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

(function () {
    var root = this;

    var NORM_AA_BIG_AAA = 4.5;
    var BIG_AA = 3;
    var NORM_AAA = 7;

    var normAAbigAAAPass = function normAAbigAAAPass(compliance, passFail) {
        compliance.aa.normal.pass = passFail;
        compliance.aaa.large.pass = passFail;
    };

    var getLuminanceFromRGB = function getLuminanceFromRGB(_ref) {
        var red = _ref.red,
            green = _ref.green,
            blue = _ref.blue;

        return 0.2126 * getsRGB(red) + 0.7152 * getsRGB(green) + 0.0722 * getsRGB(blue);
    };

    var fromHexStr = function fromHexStr(color) {
        var red = void 0;
        var green = void 0;
        var blue = void 0;
        if (color.length === 3) {
            red = getRGB(color.substring(0, 1) + color.substring(0, 1));
            green = getRGB(color.substring(1, 2) + color.substring(1, 2));
            blue = getRGB(color.substring(2, 3) + color.substring(2, 3));
        } else {
            red = getRGB(color.substring(0, 2));
            green = getRGB(color.substring(2, 4));
            blue = getRGB(color.substring(4, 6));
        }
        return { red: red, green: green, blue: blue };
    };

    var fromRgbStr = function fromRgbStr(color) {
        var matchColors = colorTypeConverter.rgbStr.pattern;

        var _matchColors$exec = matchColors.exec(color),
            _matchColors$exec2 = _slicedToArray(_matchColors$exec, 4),
            red = _matchColors$exec2[1],
            green = _matchColors$exec2[2],
            blue = _matchColors$exec2[3];

        return { red: red, green: green, blue: blue };
    };

    var colorTypeConverter = {
        hexStr: {
            pattern: /^(?:[0-9a-f]{3}){1,2}$/i,
            converter: fromHexStr
        },
        rgbStr: {
            pattern: /rgb\((\d{1,3}),\s?(\d{1,3}),\s?(\d{1,3})\)/,
            converter: fromRgbStr
        }
    };

    var getLuminance = function getLuminance(color) {
        var convertFunc = function (color) {
            for (var converter in colorTypeConverter) {
                if (color.match(colorTypeConverter[converter].pattern)) {
                    return colorTypeConverter[converter].converter;
                }
            }
        }(color);
        return getLuminanceFromRGB(convertFunc(color));
    };

    var getsRGB = function getsRGB(color) {
        color = color / 255;
        if (color <= 0.03928) {
            return color / 12.92;
        }
        return Math.pow((color + 0.055) / 1.055, 2.4);
    };

    var getRGB = function getRGB(color) {
        return parseInt(color, 16);
    };

    var createCompliance = function createCompliance() {
        return {
            aa: {
                normal: {
                    min: NORM_AA_BIG_AAA + ':1'
                },
                large: {
                    min: BIG_AA + ':1'
                }
            },
            aaa: {
                normal: {
                    min: NORM_AAA + ':1'
                },
                large: {
                    min: NORM_AA_BIG_AAA + ':1'
                }
            }
        };
    };

    var calcRatio = function calcRatio(fgColor, bgColor) {
        var fgLuminance = getLuminance(fgColor.replace('#', ''));
        var bgLuminance = getLuminance(bgColor.replace('#', ''));
        var lighterColorLuminance = Math.max(fgLuminance, bgLuminance);
        var darkerColorLuminance = Math.min(fgLuminance, bgLuminance);

        return (lighterColorLuminance + 0.05) / (darkerColorLuminance + 0.05);
    };

    var calcComplianceFromRatio = function calcComplianceFromRatio(ratio) {
        var compliance = createCompliance();
        normAAbigAAAPass(compliance, ratio >= NORM_AA_BIG_AAA);
        compliance.aa.large.pass = ratio >= BIG_AA;
        compliance.aaa.normal.pass = ratio >= NORM_AAA;
        compliance.ratio = Math.round(ratio * 100) / 100 + ':1';
        return compliance;
    };

    root.calcContrastCompliance = function (fgColor, bgColor) {
        return calcComplianceFromRatio(calcRatio(fgColor, bgColor));
    };
}).call(this);
